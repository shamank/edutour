// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	service "github.com/shamank/eduTour-backend/internal/service"
	mock "github.com/stretchr/testify/mock"
)

// Users is an autogenerated mock type for the Users type
type Users struct {
	mock.Mock
}

// ChangeUserPassword provides a mock function with given fields: ctx, userID, oldPassword, newPassword
func (_m *Users) ChangeUserPassword(ctx context.Context, userID int, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, userID, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, string) error); ok {
		r0 = rf(ctx, userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserProfile provides a mock function with given fields: ctx, userName
func (_m *Users) GetUserProfile(ctx context.Context, userName string) (service.UserProfile, error) {
	ret := _m.Called(ctx, userName)

	var r0 service.UserProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (service.UserProfile, error)); ok {
		return rf(ctx, userName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) service.UserProfile); ok {
		r0 = rf(ctx, userName)
	} else {
		r0 = ret.Get(0).(service.UserProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, userName, user
func (_m *Users) UpdateUserProfile(ctx context.Context, userName string, user service.UserProfileInput) error {
	ret := _m.Called(ctx, userName, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, service.UserProfileInput) error); ok {
		r0 = rf(ctx, userName, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUsers interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsers creates a new instance of Users. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsers(t mockConstructorTestingTNewUsers) *Users {
	mock := &Users{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
